import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.test.context.TestPropertySource;

import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.*;
import static org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers.*;

@SpringBootTest
@TestPropertySource(properties = {"debug=false"})
class SecurityConfigTest {

    @Autowired
    private SecurityFilterChain securityFilterChain;

    @Autowired
    private HttpSecurity httpSecurity;

    @Test
    void testSecurityFilterChainConfiguration() throws Exception {
        // Testando se as configurações de autorização estão corretas
        httpSecurity.authorizeRequests()
                .antMatchers("/v3/api-docs/**").permitAll()
                .antMatchers("/swagger-ui/**").permitAll()
                .antMatchers("/actuator/**").permitAll()
                .anyRequest().permitAll();

        // Testando se CSRF está desabilitado
        httpSecurity.csrf().disable();

        // Testando se a política de sessão está configurada como stateless
        httpSecurity.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);

        // Testando se a configuração do OAuth2 está correta
        httpSecurity.oauth2ResourceServer().jwt();

        securityFilterChain.doFilter(null, null);
    }
}
